!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AppendFile	FileUtil.cpp	/^AppendFile::AppendFile(string filename)$/;"	f	class:AppendFile
AsyncLogger_	Logging.cpp	/^static AsyncLogging *AsyncLogger_;$/;"	v	file:
AsyncLogging	AsyncLogging.cpp	/^AsyncLogging::AsyncLogging(const string basename,$/;"	f	class:AsyncLogging
CountDownLatch	CountDownLatch.cpp	/^CountDownLatch::CountDownLatch(int count)$/;"	f	class:CountDownLatch
CurrentThread	Thread.cpp	/^namespace CurrentThread$/;"	n	file:
Impl	Logging.cpp	/^Logger::Impl::Impl(const char *fileName, int line)$/;"	f	class:Logger::Impl
LogFile	LogFile.cpp	/^LogFile::LogFile(const string& basename, int flushEveryN)$/;"	f	class:LogFile
Logger	Logging.cpp	/^Logger::Logger(const char *fileName, int line)$/;"	f	class:Logger
MAXEVENTNUM	main.cpp	/^extern const int MAXEVENTNUM=5000;$/;"	v
MAXFDNUMS	main.cpp	/^extern const int MAXFDNUMS=1024;$/;"	v
MAXLISTENQUEUE	main.cpp	/^extern const int MAXLISTENQUEUE=1024;$/;"	v
MAX_BUFF	utils.cpp	/^const int MAX_BUFF=4096;$/;"	v
MyHandler	threadpool.cpp	/^void MyHandler(std::shared_ptr<void> req)$/;"	f
PATH	main.cpp	/^extern const std::string PATH="\/";$/;"	v
PORT	main.cpp	/^const int PORT=5678;$/;"	v
RequestData	requestData.cpp	/^RequestData::RequestData():$/;"	f	class:RequestData
RequestData	requestData.cpp	/^RequestData::RequestData(int _epollfd, int _fd, std::string _path):$/;"	f	class:RequestData
TASK_QUEUE	main.cpp	/^const int TASK_QUEUE=65536;$/;"	v
THREAD_NUM	main.cpp	/^const int THREAD_NUM=4;$/;"	v
TIMER_TIME_OUT	main.cpp	/^extern const int TIMER_TIME_OUT=5000;\/\/5s$/;"	v
Thread	Thread.cpp	/^Thread::Thread(const ThreadFunc& func, const string& n)$/;"	f	class:Thread
ThreadData	Thread.cpp	/^  ThreadData(const ThreadFunc& func,$/;"	f	struct:ThreadData
ThreadData	Thread.cpp	/^struct ThreadData$/;"	s	file:
ThreadFunc	Thread.cpp	/^  typedef Thread::ThreadFunc ThreadFunc;$/;"	t	struct:ThreadData	file:
TimerNode	timer.cpp	/^TimerNode::TimerNode(SP_ReqData rd,size_t timeout){$/;"	f	class:TimerNode
acceptConnection	epoll.cpp	/^void Epoll::acceptConnection(int lfd){$/;"	f	class:Epoll
addTimer	timer.cpp	/^void TimerManager::addTimer(SP_ReqData request_data,int timeout){$/;"	f	class:TimerManager
addTimer	timer.cpp	/^void TimerManager::addTimer(SP_TimerNode timer_node){$/;"	f	class:TimerManager
add_timer	epoll.cpp	/^void Epoll::add_timer(std::shared_ptr<RequestData> request_data, int timeout)$/;"	f	class:Epoll
analysisRequest	requestData.cpp	/^int RequestData::analysisRequest()$/;"	f	class:RequestData
append	AsyncLogging.cpp	/^void AsyncLogging::append(const char* logline, int len)$/;"	f	class:AsyncLogging
append	FileUtil.cpp	/^void AppendFile::append(const char* logline, const size_t len)$/;"	f	class:AppendFile
append	LogFile.cpp	/^void LogFile::append(const char* logline, int len)$/;"	f	class:LogFile
append_unlocked	LogFile.cpp	/^void LogFile::append_unlocked(const char* logline, int len)$/;"	f	class:LogFile
cacheTid	Thread.cpp	/^void CurrentThread::cacheTid()$/;"	f	class:CurrentThread
canRead	requestData.cpp	/^bool RequestData::canRead()$/;"	f	class:RequestData
canWrite	requestData.cpp	/^bool RequestData::canWrite()$/;"	f	class:RequestData
clearReq	timer.cpp	/^void TimerNode::clearReq(){$/;"	f	class:TimerNode
convert	LogStream.cpp	/^size_t convert(char buf[], T value)$/;"	f
count	threadpool.cpp	/^int ThreadPool::count = 0;$/;"	m	class:ThreadPool	file:
countDown	CountDownLatch.cpp	/^void CountDownLatch::countDown()$/;"	f	class:CountDownLatch
digits	LogStream.cpp	/^const char digits[] = "9876543210123456789";$/;"	v
digitsHex	LogStream.cpp	/^const char digitsHex[] = "0123456789ABCDEF";$/;"	v
disableReadAndWrite	requestData.cpp	/^void RequestData::disableReadAndWrite()$/;"	f	class:RequestData
efd	epoll.cpp	/^int Epoll::efd=-1;$/;"	m	class:Epoll	file:
enableRead	requestData.cpp	/^void RequestData::enableRead()$/;"	f	class:RequestData
enableWrite	requestData.cpp	/^void RequestData::enableWrite()$/;"	f	class:RequestData
epoll_add	epoll.cpp	/^int Epoll::epoll_add(int fd,std::shared_ptr<RequestData> request,__uint32_t events){$/;"	f	class:Epoll
epoll_del	epoll.cpp	/^int Epoll::epoll_del(int fd,__uint32_t events){$/;"	f	class:Epoll
epoll_init	epoll.cpp	/^int Epoll::epoll_init(){$/;"	f	class:Epoll
epoll_mod	epoll.cpp	/^int Epoll::epoll_mod(int fd,std::shared_ptr<RequestData> request,__uint32_t events){$/;"	f	class:Epoll
event_v	epoll.cpp	/^std::vector<struct epoll_event> Epoll::event_v;$/;"	m	class:Epoll	file:
fd2reqdata_v	epoll.cpp	/^std::vector<std::shared_ptr<RequestData>> Epoll::fd2reqdata_v;$/;"	m	class:Epoll	file:
flush	FileUtil.cpp	/^void AppendFile::flush()$/;"	f	class:AppendFile
flush	LogFile.cpp	/^void LogFile::flush()$/;"	f	class:LogFile
formatInteger	LogStream.cpp	/^void LogStream::formatInteger(T v)$/;"	f	class:LogStream
formatTime	Logging.cpp	/^void Logger::Impl::formatTime()$/;"	f	class:Logger::Impl
func_	Thread.cpp	/^  ThreadFunc func_;$/;"	m	struct:ThreadData	file:
getCount	CountDownLatch.cpp	/^int CountDownLatch::getCount() const$/;"	f	class:CountDownLatch
getEventsRequest	epoll.cpp	/^std::vector<std::shared_ptr<RequestData>> Epoll::getEventsRequest(int lfd,int events_num){$/;"	f	class:Epoll
getExpiredTime	timer.cpp	/^size_t TimerNode::getExpiredTime()const{$/;"	f	class:TimerNode
getFd	requestData.cpp	/^int RequestData::getFd()$/;"	f	class:RequestData
getMime	requestData.cpp	/^std::string MimeType::getMime(const std::string &suffix){$/;"	f	class:MimeType
gettid	Thread.cpp	/^pid_t gettid()$/;"	f
handleConn	requestData.cpp	/^void RequestData::handleConn()$/;"	f	class:RequestData
handleError	requestData.cpp	/^void RequestData::handleError(int fd, int err_num, std::string short_msg)$/;"	f	class:RequestData
handleRead	requestData.cpp	/^void RequestData::handleRead(){$/;"	f	class:RequestData
handleWrite	requestData.cpp	/^void RequestData::handleWrite()$/;"	f	class:RequestData
handle_expired_event	timer.cpp	/^void TimerManager::handle_expired_event(){$/;"	f	class:TimerManager
handle_sigpipe	utils.cpp	/^void handle_sigpipe(){$/;"	f
head	threadpool.cpp	/^int ThreadPool::head = 0;$/;"	m	class:ThreadPool	file:
init	requestData.cpp	/^void MimeType::init(){$/;"	f	class:MimeType
isDeleted	timer.cpp	/^bool TimerNode::isDeleted()const{$/;"	f	class:TimerNode
isvalid	timer.cpp	/^bool TimerNode::isvalid(){$/;"	f	class:TimerNode
join	Thread.cpp	/^int Thread::join()$/;"	f	class:Thread
latch_	Thread.cpp	/^  CountDownLatch* latch_;$/;"	m	struct:ThreadData	file:
linkTimer	requestData.cpp	/^void RequestData::linkTimer(std::shared_ptr<TimerNode> mtimer)$/;"	f	class:RequestData
lock	threadpool.cpp	/^pthread_mutex_t ThreadPool::lock = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:ThreadPool	file:
main	main.cpp	/^int main(){$/;"	f
mime	requestData.cpp	/^std::unordered_map<std::string, std::string> MimeType::mime;$/;"	m	class:MimeType	file:
my_epoll_wait	epoll.cpp	/^void Epoll::my_epoll_wait(int lfd){$/;"	f	class:Epoll
name	Thread.cpp	/^    inline const char* name()$/;"	f	namespace:CurrentThread
name_	Thread.cpp	/^  string name_;$/;"	m	struct:ThreadData	file:
once_control	requestData.cpp	/^pthread_once_t MimeType::once_control = PTHREAD_ONCE_INIT;$/;"	m	class:MimeType	file:
once_control_	Logging.cpp	/^static pthread_once_t once_control_ = PTHREAD_ONCE_INIT;$/;"	v	file:
once_init	Logging.cpp	/^void once_init()$/;"	f
operator <<	LogStream.cpp	/^LogStream& LogStream::operator<<(double v)$/;"	f	class:LogStream
operator <<	LogStream.cpp	/^LogStream& LogStream::operator<<(int v)$/;"	f	class:LogStream
operator <<	LogStream.cpp	/^LogStream& LogStream::operator<<(long long v)$/;"	f	class:LogStream
operator <<	LogStream.cpp	/^LogStream& LogStream::operator<<(long v)$/;"	f	class:LogStream
operator <<	LogStream.cpp	/^LogStream& LogStream::operator<<(short v)$/;"	f	class:LogStream
operator <<	LogStream.cpp	/^LogStream& LogStream::operator<<(unsigned int v)$/;"	f	class:LogStream
operator <<	LogStream.cpp	/^LogStream& LogStream::operator<<(unsigned long long v)$/;"	f	class:LogStream
operator <<	LogStream.cpp	/^LogStream& LogStream::operator<<(unsigned long v)$/;"	f	class:LogStream
operator <<	LogStream.cpp	/^LogStream& LogStream::operator<<(unsigned short v)$/;"	f	class:LogStream
output	Logging.cpp	/^void output(const char* msg, int len)$/;"	f
parse_Headers	requestData.cpp	/^int RequestData::parse_Headers()$/;"	f	class:RequestData
parse_URI	requestData.cpp	/^int RequestData::parse_URI(){$/;"	f	class:RequestData
queue_size	threadpool.cpp	/^int ThreadPool::queue_size = 0;$/;"	m	class:ThreadPool	file:
readn	utils.cpp	/^ssize_t readn(int fd,void *buf,size_t n){$/;"	f
readstr	utils.cpp	/^ssize_t readstr(int fd,std::string & inBuffer){$/;"	f
reset	requestData.cpp	/^void RequestData::reset(){$/;"	f	class:RequestData
runInThread	Thread.cpp	/^  void runInThread()$/;"	f	struct:ThreadData
seperateTimer	requestData.cpp	/^void RequestData::seperateTimer()$/;"	f	class:RequestData
setDefaultName	Thread.cpp	/^void Thread::setDefaultName()$/;"	f	class:Thread
setDeleted	timer.cpp	/^void TimerNode::setDeleted(){$/;"	f	class:TimerNode
setFd	requestData.cpp	/^void RequestData::setFd(int _fd)$/;"	f	class:RequestData
setSockNonBlocking	utils.cpp	/^int setSockNonBlocking(int fd){$/;"	f
shutdown	threadpool.cpp	/^int ThreadPool::shutdown = 0;$/;"	m	class:ThreadPool	file:
socket_bind_listen	main.cpp	/^int socket_bind_listen(int port){$/;"	f
start	Thread.cpp	/^void Thread::start()$/;"	f	class:Thread
startThread	Thread.cpp	/^void* startThread(void* obj)$/;"	f
started	threadpool.cpp	/^int ThreadPool::started = 0;$/;"	m	class:ThreadPool	file:
t_cachedTid	Thread.cpp	/^    __thread int t_cachedTid;$/;"	m	namespace:CurrentThread	file:
t_threadName	Thread.cpp	/^    __thread const char* t_threadName;$/;"	m	namespace:CurrentThread	file:
t_tidString	Thread.cpp	/^    __thread char t_tidString[32];$/;"	m	namespace:CurrentThread	file:
t_tidStringLength	Thread.cpp	/^    __thread int t_tidStringLength;$/;"	m	namespace:CurrentThread	file:
tail	threadpool.cpp	/^int ThreadPool::tail = 0;$/;"	m	class:ThreadPool	file:
task_queue	threadpool.cpp	/^std::vector<ThreadPoolTask> ThreadPool::task_queue;$/;"	m	class:ThreadPool	file:
task_queue_not_empty	threadpool.cpp	/^pthread_cond_t ThreadPool::task_queue_not_empty = PTHREAD_COND_INITIALIZER;$/;"	m	class:ThreadPool	file:
threadFunc	AsyncLogging.cpp	/^void AsyncLogging::threadFunc()$/;"	f	class:AsyncLogging
thread_count	threadpool.cpp	/^int ThreadPool::thread_count = 0;\/\/xian cheng shu$/;"	m	class:ThreadPool	file:
threadpool_add_task	threadpool.cpp	/^int ThreadPool::threadpool_add_task(std::shared_ptr<void> args, std::function<void(std::shared_ptr<void>)> fun){$/;"	f	class:ThreadPool
threadpool_create	threadpool.cpp	/^int ThreadPool::threadpool_create(int _thread_count, int _queue_size){$/;"	f	class:ThreadPool
threadpool_destroy	threadpool.cpp	/^int ThreadPool::threadpool_destroy(ShutDownOption shutdown_option)$/;"	f	class:ThreadPool
threadpool_free	threadpool.cpp	/^int ThreadPool::threadpool_free()$/;"	f	class:ThreadPool
threadpool_thread	threadpool.cpp	/^void *ThreadPool::threadpool_thread(void *args)$/;"	f	class:ThreadPool
threads	threadpool.cpp	/^std::vector<pthread_t> ThreadPool::threads;$/;"	m	class:ThreadPool	file:
tid	Thread.cpp	/^    inline int tid()$/;"	f	namespace:CurrentThread
tidString	Thread.cpp	/^    inline const char* tidString() \/\/ for logging$/;"	f	namespace:CurrentThread
tidStringLength	Thread.cpp	/^    inline int tidStringLength() \/\/ for logging$/;"	f	namespace:CurrentThread
tid_	Thread.cpp	/^  pid_t* tid_;$/;"	m	struct:ThreadData	file:
timer_manager	epoll.cpp	/^TimerManager Epoll::timer_manager;$/;"	m	class:Epoll	file:
update	timer.cpp	/^void TimerNode::update(int timeout){$/;"	f	class:TimerNode
wait	CountDownLatch.cpp	/^void CountDownLatch::wait(){$/;"	f	class:CountDownLatch
write	FileUtil.cpp	/^size_t AppendFile::write(const char* logline, size_t len)$/;"	f	class:AppendFile
writen	utils.cpp	/^ssize_t writen(int fd,void * buf,size_t n){$/;"	f
writestr	utils.cpp	/^ssize_t writestr(int fd,std::string & sBuffer){$/;"	f
zero	LogStream.cpp	/^const char* zero = digits + 9;$/;"	v
~AppendFile	FileUtil.cpp	/^AppendFile::~AppendFile()$/;"	f	class:AppendFile
~LogFile	LogFile.cpp	/^LogFile::~LogFile()$/;"	f	class:LogFile
~Logger	Logging.cpp	/^Logger::~Logger()$/;"	f	class:Logger
~RequestData	requestData.cpp	/^RequestData::~RequestData(){$/;"	f	class:RequestData
~Thread	Thread.cpp	/^Thread::~Thread()$/;"	f	class:Thread
~TimerNode	timer.cpp	/^TimerNode::~TimerNode(){$/;"	f	class:TimerNode
